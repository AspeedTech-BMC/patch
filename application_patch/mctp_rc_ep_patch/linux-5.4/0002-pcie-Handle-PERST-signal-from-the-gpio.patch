From d277c348b77a4ae584c7287ddb7b277038a7acb8 Mon Sep 17 00:00:00 2001
From: ryan_chen <ryan_chen@aspeedtech.com>
Date: Mon, 7 Mar 2022 10:10:09 +0800
Subject: [PATCH 2/2] pcie: Handle PERST signal from the gpio.

This patch will use the two gpio to act as EP-PERST(input) and
RC-PERST(output).
EP-PERST(input): When this gpio sense the GPIO falling edge irq the
patch will execute the below procedure to fix the EP/RC mctp issue:
1. Remove the devices on the RC bus
2. Toggle the SSPRST# to reset the PCIe EP and PCIe RC
3. Rescan the devices on the RC bus
RC-PERST(output): When the BMC reboot the patch will toggle the gpio to
reset the devices on it.
In addition, this patch will remove the toggle of pcie rc perst from the
pciecfg driver to avoid reset the EP when BMC reboot.

The topology for MCTP EP/RC work at the same time:
+------+            +---------------+
|x86 RC+----------->|GPIO(3.3v)     |
+------+            |               |
         +----------+PERST#         |
         |          |               |
         |          |               |
         +--------->|SSPRST#        |
+------+            |               |
|  EP  |<-----------+GPIO(3.3v)     |
+------+            |               |
                    +---------------+

Signed-off-by: ryan_chen <ryan_chen@aspeedtech.com>
Change-Id: I1663c40228e1d8481ddc9268800535f45994efc5
---
 arch/arm/boot/dts/aspeed-ast2600-evb.dts |   2 +
 drivers/pci/controller/aspeed_pciecfg.c  |  11 ---
 drivers/pci/controller/pcie-aspeed.c     | 101 +++++++++++++++++++++++
 3 files changed, 103 insertions(+), 11 deletions(-)

diff --git a/arch/arm/boot/dts/aspeed-ast2600-evb.dts b/arch/arm/boot/dts/aspeed-ast2600-evb.dts
index 5e976474d9f8..7873cc7ae38a 100644
--- a/arch/arm/boot/dts/aspeed-ast2600-evb.dts
+++ b/arch/arm/boot/dts/aspeed-ast2600-evb.dts
@@ -828,6 +828,8 @@
 };
 
 &pcie1 {
+	perst-ep-in-gpios = <&gpio0 ASPEED_GPIO(B, 0) GPIO_ACTIVE_HIGH>;
+	perst-rc-out-gpios = <&gpio0 ASPEED_GPIO(B, 1) GPIO_ACTIVE_HIGH>;
 	status = "okay";
 };
 
diff --git a/drivers/pci/controller/aspeed_pciecfg.c b/drivers/pci/controller/aspeed_pciecfg.c
index 7ac821eb55a5..06dd34ef7f0c 100644
--- a/drivers/pci/controller/aspeed_pciecfg.c
+++ b/drivers/pci/controller/aspeed_pciecfg.c
@@ -30,17 +30,6 @@ static const struct of_device_id aspeed_pciecfg_of_match[] = {
 static void aspeed_pciecfg_init(struct aspeed_pciecfg *pciecfg)
 {
 	reset_control_assert(pciecfg->rst);
-
-	if (pciecfg->rc_low_rst) {
-		reset_control_deassert(pciecfg->rc_low_rst);
-		reset_control_assert(pciecfg->rc_low_rst);
-	}
-
-	if (pciecfg->rc_high_rst) {
-		reset_control_deassert(pciecfg->rc_high_rst);
-		reset_control_assert(pciecfg->rc_high_rst);
-	}
-
 	mdelay(1);
 	reset_control_deassert(pciecfg->rst);
 
diff --git a/drivers/pci/controller/pcie-aspeed.c b/drivers/pci/controller/pcie-aspeed.c
index e3df46333f9a..0817b76d6799 100644
--- a/drivers/pci/controller/pcie-aspeed.c
+++ b/drivers/pci/controller/pcie-aspeed.c
@@ -18,6 +18,10 @@
 #include <linux/pci.h>
 #include <linux/regmap.h>
 #include <linux/reset.h>
+#include <linux/irq.h>
+#include <linux/interrupt.h>
+#include <linux/workqueue.h>
+#include <linux/gpio/consumer.h>
 
 #include "../pci.h"
 
@@ -111,6 +115,9 @@ struct aspeed_pcie {
 	struct irq_domain *msi_domain;
 	struct mutex lock;
 	int hotplug_event;
+	struct gpio_desc *perst_ep_in;
+	struct gpio_desc *perst_rc_out;
+	struct delayed_work rst_dwork;
 	DECLARE_BITMAP(msi_irq_in_use, MAX_MSI_HOST_IRQS);
 };
 
@@ -710,6 +717,13 @@ static void aspeed_pcie_port_init(struct aspeed_pcie *pcie)
 #else
 	regmap_write(pcie->pciephy, ASPEED_PCIE_GLOBAL, ROOT_COMPLEX_ID(0x3));
 #endif
+	/* Toggle the gpio to reset the devices on RC bus */
+	if (pcie->domain) {
+		pcie->perst_rc_out = devm_gpiod_get(pcie->dev, "perst-rc-out",
+						    GPIOD_OUT_LOW);
+		mdelay(100);
+		gpiod_set_value(pcie->perst_rc_out, 1);
+	}
 
 	reset_control_deassert(pcie->phy_rst);
 	mdelay(500);
@@ -844,6 +858,79 @@ static ssize_t hotplug_store(struct device *dev,
 
 static DEVICE_ATTR_WO(hotplug);
 
+static void aspeed_pcie_reset_work(struct work_struct *work)
+{
+	struct aspeed_pcie *pcie = container_of(work, typeof(*pcie), rst_dwork.work);
+	struct pci_host_bridge *host = pci_host_bridge_from_priv(pcie);
+	struct pci_dev *dev;
+	u16 command;
+	u32 link_sts = 0;
+
+	pci_lock_rescan_remove();
+
+	dev = pci_get_domain_bus_and_slot(pcie->domain, 130, 0);
+	if (dev) {
+		pci_stop_and_remove_bus_device(dev);
+
+		pci_read_config_word(dev, PCI_COMMAND, &command);
+		command &= ~(PCI_COMMAND_MASTER | PCI_COMMAND_SERR);
+		command |= PCI_COMMAND_INTX_DISABLE;
+		pci_write_config_word(dev, PCI_COMMAND, command);
+
+		pci_dev_put(dev);
+	}
+
+	dev = pci_get_domain_bus_and_slot(pcie->domain, 129, 0);
+	if (dev) {
+		pci_stop_and_remove_bus_device(dev);
+
+		pci_read_config_word(dev, PCI_COMMAND, &command);
+		command &= ~(PCI_COMMAND_MASTER | PCI_COMMAND_SERR);
+		command |= PCI_COMMAND_INTX_DISABLE;
+		pci_write_config_word(dev, PCI_COMMAND, command);
+
+		pci_dev_put(dev);
+	}
+
+	dev = pci_get_domain_bus_and_slot(pcie->domain, 128, PCI_DEVFN(8, 0));
+	if (dev) {
+		pci_stop_and_remove_bus_device(dev);
+
+		pci_read_config_word(dev, PCI_COMMAND, &command);
+		command &= ~(PCI_COMMAND_MASTER | PCI_COMMAND_SERR);
+		command |= PCI_COMMAND_INTX_DISABLE;
+		pci_write_config_word(dev, PCI_COMMAND, command);
+
+		pci_dev_put(dev);
+	}
+
+	reset_control_assert(pcie->phy_rst);
+	ndelay(300);
+	reset_control_deassert(pcie->phy_rst);
+	mdelay(10);
+
+
+	regmap_read(pcie->pciephy, ASPEED_PCIE_LINK, &link_sts);
+	if (link_sts & PCIE_LINK_STS)
+		dev_info(pcie->dev, "PCIE- Link up\n");
+	else
+		dev_info(pcie->dev, "PCIE- Link down\n");
+
+	pci_rescan_bus(host->bus);
+	pci_unlock_rescan_remove();
+
+}
+
+static irqreturn_t pcie_rst_irq_handler(int irq, void *dev_id)
+{
+	struct aspeed_pcie *pcie = dev_id;
+
+	schedule_delayed_work(&pcie->rst_dwork,
+				  msecs_to_jiffies(1));
+
+	return IRQ_HANDLED;
+}
+
 static int aspeed_pcie_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
@@ -879,6 +966,20 @@ static int aspeed_pcie_probe(struct platform_device *pdev)
 		return err;
 	}
 
+	if (pcie->domain) {
+		dev_info(&pdev->dev, "pcie->dev_domain %d\n", pcie->domain);
+		pcie->perst_ep_in = devm_gpiod_get(pcie->dev, "perst-ep-in", GPIOD_IN);
+		gpiod_set_debounce(pcie->perst_ep_in, 100);
+		irq_set_irq_type(gpiod_to_irq(pcie->perst_ep_in), IRQ_TYPE_EDGE_FALLING);
+		err = devm_request_irq(pcie->dev, gpiod_to_irq(pcie->perst_ep_in),
+					   pcie_rst_irq_handler, IRQF_SHARED,
+					   "PERST monitor", pcie);
+		if (err) {
+			dev_err(pcie->dev, "Failed to request gpio irq %d\n", err);
+			return err;
+		}
+		INIT_DELAYED_WORK(&pcie->rst_dwork, aspeed_pcie_reset_work);
+	}
 
 	return pci_host_probe(host);
 }
-- 
2.25.1

