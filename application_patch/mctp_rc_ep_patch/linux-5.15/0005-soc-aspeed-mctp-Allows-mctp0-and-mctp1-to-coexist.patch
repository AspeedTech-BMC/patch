From 119b79cc89cf6ad0b632994a12f5dc7c6a385553 Mon Sep 17 00:00:00 2001
From: Billy Tsai <billy_tsai@aspeedtech.com>
Date: Mon, 24 Jan 2022 18:11:31 +0800
Subject: [PATCH 5/6] soc: aspeed: mctp: Allows mctp0 and mctp1 to coexist

This patch allows mctp0 and mctp1 to coexist.
The device node name for mctp over pcie0(rc/ep) is aspeed-mctp and the
name for mctp over pcie1(rc only) is aspeed-mctp1.
In addition, the reset assert for the MCTP controller will only control
by the perst from the PCIe.

Signed-off-by: Billy Tsai <billy_tsai@aspeedtech.com>
Change-Id: I2e09f1ff49ee4ba61f8417399e15e7e72989bd7f
---
 drivers/soc/aspeed/aspeed-mctp.c | 45 ++++++++++++++++----------------
 1 file changed, 23 insertions(+), 22 deletions(-)

diff --git a/drivers/soc/aspeed/aspeed-mctp.c b/drivers/soc/aspeed/aspeed-mctp.c
index 8c7e0728f70f..bb445319f41c 100644
--- a/drivers/soc/aspeed/aspeed-mctp.c
+++ b/drivers/soc/aspeed/aspeed-mctp.c
@@ -251,6 +251,7 @@ struct mctp_channel {
 
 struct aspeed_mctp {
 	struct device *dev;
+	struct miscdevice mctp_miscdev;
 	const struct aspeed_mctp_match_data *match_data;
 	struct regmap *map;
 	struct reset_control *reset;
@@ -1670,12 +1671,6 @@ struct device_type aspeed_mctp_type = {
 	.name		= "aspeed-mctp",
 };
 
-static struct miscdevice aspeed_mctp_miscdev = {
-	.minor = MISC_DYNAMIC_MINOR,
-	.name = "aspeed-mctp",
-	.fops = &aspeed_mctp_fops,
-};
-
 static void aspeed_mctp_send_pcie_uevent(struct kobject *kobj, bool ready)
 {
 	char *pcie_not_ready_event[] = { ASPEED_MCTP_READY "=0", NULL };
@@ -1721,7 +1716,7 @@ static void aspeed_mctp_reset_work(struct work_struct *work)
 {
 	struct aspeed_mctp *priv = container_of(work, typeof(*priv),
 						pcie.rst_dwork.work);
-	struct kobject *kobj = &aspeed_mctp_miscdev.this_device->kobj;
+	struct kobject *kobj = &priv->mctp_miscdev.this_device->kobj;
 	u16 bdf;
 
 	if (priv->pcie.need_uevent) {
@@ -1859,14 +1854,17 @@ static int aspeed_mctp_resources_init(struct aspeed_mctp *priv)
 	if (IS_ERR(priv->map))
 		return PTR_ERR(priv->map);
 
-	priv->reset = devm_reset_control_get_by_index(priv->dev, 0);
+	priv->reset =
+		priv->rc_f ?
+			      devm_reset_control_get_by_index(priv->dev, 0) :
+			      devm_reset_control_get_shared_by_index(priv->dev, 0);
 	if (IS_ERR(priv->reset)) {
 		dev_err(priv->dev, "Failed to get reset!\n");
 		return PTR_ERR(priv->reset);
 	}
 
 	if (priv->rc_f) {
-		priv->reset_dma = devm_reset_control_get_by_index(priv->dev, 1);
+		priv->reset_dma = devm_reset_control_get_shared_by_index(priv->dev, 1);
 		if (IS_ERR(priv->reset_dma)) {
 			dev_err(priv->dev, "Failed to get ep reset!\n");
 			return PTR_ERR(priv->reset_dma);
@@ -2016,16 +2014,10 @@ static void aspeed_mctp_hw_reset(struct aspeed_mctp *priv)
 		}
 	}
 
-	if (reset_control_assert(priv->reset) != 0)
-		dev_warn(priv->dev, "Failed to assert reset\n");
-
 	if (reset_control_deassert(priv->reset) != 0)
 		dev_warn(priv->dev, "Failed to deassert reset\n");
 
 	if (priv->rc_f) {
-		if (reset_control_assert(priv->reset_dma) != 0)
-			dev_warn(priv->dev, "Failed to assert ep reset\n");
-
 		if (reset_control_deassert(priv->reset_dma) != 0)
 			dev_warn(priv->dev, "Failed to deassert ep reset\n");
 	}
@@ -2088,13 +2080,17 @@ static int aspeed_mctp_probe(struct platform_device *pdev)
 
 	aspeed_mctp_channels_init(priv);
 
-	aspeed_mctp_miscdev.parent = priv->dev;
-	ret = misc_register(&aspeed_mctp_miscdev);
+	priv->mctp_miscdev.parent = priv->dev;
+	priv->mctp_miscdev.minor = MISC_DYNAMIC_MINOR;
+	priv->mctp_miscdev.name =
+		priv->rc_f ? "aspeed-mctp1" : "aspeed-mctp";
+	priv->mctp_miscdev.fops = &aspeed_mctp_fops;
+	ret = misc_register(&priv->mctp_miscdev);
 	if (ret) {
 		dev_err(priv->dev, "Failed to register miscdev\n");
 		goto out_dma;
 	}
-	aspeed_mctp_miscdev.this_device->type = &aspeed_mctp_type;
+	priv->mctp_miscdev.this_device->type = &aspeed_mctp_type;
 
 	ret = aspeed_mctp_irq_init(priv);
 	if (ret) {
@@ -2118,9 +2114,9 @@ static int aspeed_mctp_probe(struct platform_device *pdev)
 				   FIELD_GET(TX_MAX_PAYLOAD_SIZE_MASK, fls(ASPEED_MCTP_MTU >> 6)));
 	}
 
-	priv->peci_mctp =
-		platform_device_register_data(priv->dev, "peci-mctp",
-					      PLATFORM_DEVID_NONE, NULL, 0);
+	priv->peci_mctp = platform_device_register_data(
+		priv->dev, priv->rc_f ? "peci1-mctp" : "peci0-mctp",
+		PLATFORM_DEVID_NONE, NULL, 0);
 	if (IS_ERR(priv->peci_mctp))
 		dev_err(priv->dev, "Failed to register peci-mctp device\n");
 
@@ -2143,7 +2139,7 @@ static int aspeed_mctp_remove(struct platform_device *pdev)
 
 	platform_device_unregister(priv->peci_mctp);
 
-	misc_deregister(&aspeed_mctp_miscdev);
+	misc_deregister(&priv->mctp_miscdev);
 
 	aspeed_mctp_irq_disable(priv);
 
@@ -2151,6 +2147,11 @@ static int aspeed_mctp_remove(struct platform_device *pdev)
 
 	aspeed_mctp_drv_fini(priv);
 
+	if (priv->rc_f)
+		reset_control_assert(priv->reset_dma);
+
+	reset_control_assert(priv->reset);
+
 	return 0;
 }
 
-- 
2.25.1

